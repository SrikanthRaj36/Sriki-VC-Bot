#!/usr/bin/env python3
# Copyright (C) @S780821
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram import Client, filters
from utils import USERNAME, mp
from config import Config
U=USERNAME
CHAT=Config.CHAT
msg=Config.msg
HOME_TEXT = "<b> ú·¥á ü ü·¥è, [{}](tg://user?id={})\n\nI am HANGOVER_RADIO 24√ó7.\n\nHits /help for more details...</b>"
HELP = """
**User Commands:**
‚ñ∑/play **[song name]/[yt link]**: Reply to an audio file.
‚ñ∑/dplay **[song name]:** Play music from Deezer.
‚ñ∑/player:  Show current playing song.
‚ñ∑upload: Uploads current playing song as audio file.
‚ñ∑/help: Show help for commands.
‚ñ∑/playlist: Shows the playlist.

**Admin Commands:**
‚ñ∑/skip **[n]** ...  Skip current or n where n >= 2
‚ñ∑cplay: Play music from a channel's music files.
‚ñ∑/yplay: Play music from a youtube playlist.
‚ñ∑/join: Join voice chat.
‚ñ∑/leave: Leave current voice chat.
‚ñ∑/shuffle: Shuffle Playlist.
‚ñ∑/vc: Check which VC is joined.
‚ñ∑/stop: Stop playing.
‚ñ∑/radio: Start Radio.
‚ñ∑/stopradio: Stops Radio Stream.
‚ñ∑/clearplaylist: Clear the playlist.
‚ñ∑/export: Export current playlist for future use.
‚ñ∑/import: Import a previously exported playlist.
‚ñ∑/replay: Play from the beginning.
‚ñ∑/clean: Remove unused RAW PCM files.
‚ñ∑/pause: Pause playing.
‚ñ∑/resume: Resume playing.
‚ñ∑/volume: Change volume(0-200).
‚ñ∑/mute: Mute in VC.
‚ñ∑/unmute: Unmute in VC.
‚ñ∑/restart: Restarts the Bot.
"""



@Client.on_message(filters.command(['start', f'start@{U}']))
async def start(client, message):
    buttons = [
        [
        InlineKeyboardButton("üî• S·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á üî•", url='https://github.com/S780821/HANGOVER_RADIO'),
    ],
    [
        InlineKeyboardButton('üë• S·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/xmarty_support'),
        InlineKeyboardButton('·¥Ñ ú…™·¥õ·¥Ñ úa·¥õ …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/welcomefriendclub'),
    ],
    [
        InlineKeyboardButton('üÜò  ú·¥á ü·¥ò & ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üÜò', callback_data='help'),

    ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply(HOME_TEXT.format(message.from_user.first_name, message.from_user.id), reply_markup=reply_markup)
    await message.delete()



@Client.on_message(filters.command(["help", f"help@{U}"]))
async def show_help(client, message):
    buttons = [
        [
            InlineKeyboardButton("üî• s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á üî•", url='https://github.com/S780821/HANGOVER_RADIO'),
        ],
        [
            InlineKeyboardButton('üë• s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/xmarty_support'),
            InlineKeyboardButton('·¥Ñ ú…™·¥õ·¥Ñ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò ', url='https://t.me/welcomefriendclub'),
        ],
        [
            InlineKeyboardButton('üó°Ô∏è ·¥è·¥°…¥·¥á Ä üó°Ô∏è', url='https://t.me/Xmartperson'),
        
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(
        HELP,
        reply_markup=reply_markup
        )
    await message.delete()
@Client.on_message(filters.command(["restart", f"restart@{U}"]) & filters.user(Config.ADMINS))
async def restart(client, message):
    await message.reply_text("üîÑ —è—î—ïœÑŒ±—èœÑŒπ–∏g...")
    await message.delete()
    process = FFMPEG_PROCESSES.get(CHAT)
    if process:
        try:
            process.send_signal(SIGINT)
        except subprocess.TimeoutExpired:
            process.kill()
    os.execl(sys.executable, sys.executable, *sys.argv)

